set encoding=UTF-8
"""""""""""""""""""""""""""""""""""""
" Vundle
"""""""""""""""""""""""""""""""""""""
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

"""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""
" Syntax
Plugin 'othree/yajs.vim'
Plugin 'mxw/vim-jsx'
Plugin 'elzr/vim-json'
Plugin 'kchmck/vim-coffee-script'
Plugin 'iloginow/vim-stylus'
Plugin 'digitaltoad/vim-pug'

" Formatting and Linting
Plugin 'editorconfig/editorconfig-vim'
Plugin 'mattn/emmet-vim'
Plugin 'w0rp/ale'

" Snippets
Plugin 'honza/vim-snippets'

" Utils
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'justinmk/vim-sneak'
Plugin 'justinmk/vim-dirvish'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-sleuth'
Plugin 'tpope/vim-obsession'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-repeat'
Plugin 'ervandew/supertab'
Plugin 'SirVer/ultisnips'
Plugin 'valloric/youcompleteme'
Plugin 'Raimondi/delimitMate'
Plugin 'tomtom/tcomment_vim'
Plugin 'skwp/greplace.vim'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'takac/vim-hardtime'
Plugin 'mileszs/ack.vim'
Plugin 'jbranchaud/vim-bdubs'

" Themes
Plugin 'chriskempson/base16-vim'

" UI
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'chrisbra/Colorizer'
Plugin 'airblade/vim-gitgutter'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'machakann/vim-highlightedyank'
Plugin 'kshenoy/vim-signature'
Plugin 'ryanoasis/vim-devicons'

"""""""""""""""""""""""""""""""""""""
" END Plugins
"""""""""""""""""""""""""""""""""""""

call vundle#end()            " required
filetype plugin indent on    " required

syntax enable
syntax on

"""""""""""""""""""""""""""""""""""""
" Editor Config
"""""""""""""""""""""""""""""""""""""
set hidden
set conceallevel=0
set wildignore+=**/node_modules/**
set inccommand=nosplit
" Splits
set splitbelow
set splitright
" Folds
set foldmethod=indent
set foldlevel=1
set foldlevelstart=99
" set foldclose=all
" Theme
set termguicolors
set background=dark
colorscheme base16-eighties

" Line Numbers
set number
set relativenumber
set cursorline
" Fixed Gutter Width
set signcolumn=yes
" Wrap text
set wrap
" Tabs
set ts=2 sts=2 sw=2 expandtab
" Whitespaces
set listchars=tab:→\ ,space:·,eol:¬
" Backspace Fix for Vim
set backspace=2
" Cursor
if $TERM_PROGRAM =~ "iTerm.app"
    let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
    let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
endif

"""""""""""""""""""""""""""""""""""""
" Mappings Config
"""""""""""""""""""""""""""""""""""""
let mapleader = ' '
" Saving and quiting
nnoremap <leader>w :w<cr>
nnoremap <leader>q :q<cr>
" Sourcing
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <leader>so :w<cr> :source $MYVIMRC<cr>
nnoremap <leader>spi :w<cr> :source $MYVIMRC<cr> :PluginInstall<cr>
" Plugin Manager commands
nnoremap <leader>pi :PluginInstall<cr>
nnoremap <leader>pc :PluginClean<cr>
nnoremap <leader>pu :PluginUpdate<cr>
" Quick  edit
nnoremap <leader>vs :vsplit<space>
nnoremap <leader>hs :split<space>
nnoremap <leader>tn :tabnew<space>
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
" Convenience
inoremap kj <esc>
tnoremap <esc> <C-\><C-n>
nnoremap <leader>tm :Term<cr>
nnoremap <leader>; ^vg_
" Folding
nnoremap <cr> za
" Disabled
inoremap <esc> <nop>
" Window resizing. Alt + ljkh=
nnoremap <silent> ¬ <C-W><
nnoremap <silent> ∆ <C-W>-
nnoremap <silent> ˚ <C-W>+
nnoremap <silent> ˙ <C-W>>
nnoremap <silent> ≠ <C-W>=
" Toggle commands
nnoremap <leader>ht :HardTimeToggle<cr>
nnoremap <leader>ch :ColorToggle<cr>
"Search Highlight off toggle, toggled on when search is reactivated
nnoremap <leader>yh :noh<CR>
" Utility commands
nnoremap <leader>f :ALEFix<CR>
nnoremap [l :ALEPrevious<CR>
nnoremap ]l :ALENext<CR>
noremap <C-p> :CtrlP<CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gd :Gdiff<CR>
nnoremap <leader>gb :Gblame<CR>
" Indent In (<) and Indent Out (>)
nnoremap <leader>i <<
nnoremap <leader>o >>
vnoremap <leader>i <gv
vnoremap <leader>o >gv
" Buffer commands. Alt + ; = next buff, Alt + , = prev
nnoremap … :bn<cr>
nnoremap ≤ :bp<cr>
nnoremap <leader>bd :bd<cr>
nnoremap <leader>lb <C-^>
" Searching
nnoremap ƒ :Ack!<space>
" Space and Tab Conversion
nnoremap <leader>sp :Tab2Space<cr>
nnoremap <leader>tb :Space2Tab<cr>
" Copy to clipboard
vnoremap <leader>c "*y
" Past last yank
nnoremap <leader>py "0p
" Plugin overrides
let g:multi_cursor_select_all_word_key = '<leader>L'
let g:UltiSnipsExpandTrigger='<leader><tab>'
" let g:UltiSnipsJumpForwardTrigger='<tab>'
let g:user_emmet_leader_key='<c-s>'

"""""""""""""""""""""""""""""""""""""
" Plugin Config
"""""""""""""""""""""""""""""""""""""
" Airline
let g:airline_highlighting_cache = 1
let g:airline_theme='base16'
let g:airline_base16_improved_contrast = 1
let g:airline#themes#base16#constant = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#ale#enabled = 1
let g:airline_section_z = airline#section#create(['%{ObsessionStatus(''$'', ''!'')}', 'windowswap', '%3p%% ', 'linenr', ':%3v '])
" let g:airline#extensions#whitespace#enabled = 1

" Ctrlp
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'
let g:ctrlp_by_filename = 1
let g:ctrlp_show_hidden = 1
" DelimitMate
let delimitMate_expand_cr=1

" Emmet
let g:user_emmet_settings = {
  \  'javascript.jsx' : {
    \      'extends' : 'jsx',
    \  },
  \}

" Ale
let g:ale_fixers = { 'javascript': ['prettier', 'eslint'], 'json': ['prettier'], 'css': ['prettier'], 'html': ['tidy'] }
let g:ale_javascript_prettier_use_local_config = 1

" Vim Indent Guides
let g:indent_guides_enable_on_vim_startup = 1

" Hard Time
let g:list_of_normal_keys = ["h", "j", "k", "l", "+", "<UP>", "<DOWN>", "<LEFT>", "<RIGHT>"]
let g:list_of_visual_keys = ["h", "j", "k", "l", "+", "<UP>", "<DOWN>", "<LEFT>", "<RIGHT>"]
let g:hardtime_allow_different_key = 1

" Vim Session
let g:session_autosave = 'no'

"""""""""""""""""""""""""""""""""""""
" Custom Functions
"""""""""""""""""""""""""""""""""""""
" Open terminal in horizontal split sized to 15
command! Term 15sp | term
" FormatJSON
command! FormatJSON %!python -m json.tool

" Convert tabs to spaces and spaces to tabs (http://vim.wikia.com/wiki/Super_retab)
" Return indent (all whitespace at start of a line), converted from
" tabs to spaces if what = 1, or from spaces to tabs otherwise.
" When converting to tabs, result has no redundant spaces.
function! Indenting(indent, what, cols)
  let spccol = repeat(' ', a:cols)
  let result = substitute(a:indent, spccol, '\t', 'g')
  let result = substitute(result, ' \+\ze\t', '', 'g')
  if a:what == 1
    let result = substitute(result, '\t', spccol, 'g')
  endif
  return result
endfunction

" Convert whitespace used for indenting (before first non-whitespace).
" what = 0 (convert spaces to tabs), or 1 (convert tabs to spaces).
" cols = string with number of columns per tab, or empty to use 'tabstop'.
" The cursor position is restored, but the cursor will be in a different
" column when the number of characters in the indent of the line is changed.
function! IndentConvert(line1, line2, what, cols)
  let savepos = getpos('.')
  let cols = empty(a:cols) ? &tabstop : a:cols
  execute a:line1 . ',' . a:line2 . 's/^\s\+/\=Indenting(submatch(0), a:what, cols)/e'
  call histdel('search', -1)
  call setpos('.', savepos)
endfunction
command! -nargs=? -range=% Space2Tab call IndentConvert(<line1>,<line2>,0,<q-args>)
command! -nargs=? -range=% Tab2Space call IndentConvert(<line1>,<line2>,1,<q-args>)

" Set tabstop, softtabstop and shiftwidth to the same value
" http://vimcasts.org/episodes/tabs-and-spaces
command! -nargs=* Stab call Stab()
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:sts = l:tabstop
    let &l:ts = l:tabstop
    let &l:sw = l:tabstop
  endif
  call SummarizeTabs()
endfunction

function! SummarizeTabs()
  try
    echohl ModeMsg
    echon 'tabstop='.&l:ts
    echon ' shiftwidth='.&l:sw
    echon ' softtabstop='.&l:sts
    if &l:et
      echon ' expandtab'
    else
      echon ' noexpandtab'
    endif
  finally
    echohl None
  endtry
endfunction

" Automatically set rc files to json syntax
autocmd BufNewFile,BufRead .*rc set syntax=json

"""""""""""""""""""""""""""""""""""""
" Theme Alterations
"""""""""""""""""""""""""""""""""""""
" hi IndentGuidesOdd  ctermbg=237 guibg=#3a3a3a
" hi IndentGuidesEven ctermbg=236 guibg=#1c1c1c
hi HighlightedyankRegion cterm=reverse gui=reverse
hi SignColumn ctermbg=235 guibg=#2d2d2d
hi LineNr ctermbg=235 guibg=#2d2d2d
set guicursor+=n:blinkon1
